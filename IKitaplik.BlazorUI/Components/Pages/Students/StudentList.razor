@page "/student/list"
@inject IStudentService _studentService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject MessageBoxService MessageBoxService
@inject NavigationManager Nav
@attribute [Authorize]


<MudItem Class="mt-2 mb-2 text-end">
    <MudButton Href="student/add" Color="Color.Info" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
        Yeni Öğrenci Ekle
    </MudButton>
</MudItem>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="m-4" CloseIcon="@Icons.Material.Filled.Close">
        <MudText>@errorMessage</MudText>
    </MudAlert>
}
else
{
    <MudTable Items="@Elements" Hover="true" ReadOnly="true" Filter="new Func<StudentGetDto, bool>(FilterFunc)"
              SortLabel="Sort By" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Öğrenciler</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.Id)">Nr</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.StudentNumber)">Öğrenci Numarası</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.Class)">Sınıfı</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.Name)">İsmi</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.EMail)">EMail</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.Situation)">Kitap Okuyormu</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.NumberofBooksRead)">Okuduğu Kitap Sayısı</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.TelephoneNumber)">Telefon Numarası</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<StudentGetDto, object>(x => x.Point)">Puan</MudTableSortLabel></MudTh>
            <MudTh>İşlemler</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Öğrenci Numarası">@context.StudentNumber</MudTd>
            <MudTd DataLabel="Sınıf">@context.Class</MudTd>
            <MudTd DataLabel="İsim">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.EMail</MudTd>
            <MudTd DataLabel="Kitap Okuyormu">@(context.Situation ? "Hayır" : "Evet")</MudTd>
            <MudTd DataLabel="Okuduğu Kitap Sayısı">@context.NumberofBooksRead</MudTd>
            <MudTd DataLabel="Telefon Numarası">@context.TelephoneNumber</MudTd>
            <MudTd DataLabel="Puan">@context.Point</MudTd>
            <MudTd>
                <MudButtonGroup>
                    <MudIconButton ButtonType="ButtonType.Button" OnClick="(() => StudentUpdate(context.Id))" Color="Color.Warning" Icon="@Icons.Material.Filled.Update"></MudIconButton>
                    <MudIconButton ButtonType="ButtonType.Button" OnClick=" (() => StudentDelete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private string errorMessage = string.Empty;
    private string searchString = string.Empty;
    IEnumerable<StudentGetDto> Elements = new List<StudentGetDto>();
    protected override async Task OnInitializedAsync()
    {
        var res = await _studentService.GetAllAsync();
        if (res.Success)
        {
            Elements = res.Data.ToList();
            StateHasChanged();
        }
        else
        {
            errorMessage = res.Message;
        }
    }
    private bool FilterFunc(StudentGetDto element)
    {
        searchString = searchString?.Trim().ToLower() ?? "";
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.ToLower().Contains(searchString))
            return true;
        if (element.StudentNumber.ToString().Contains(searchString))
            return true;
        return false;
    }
    private async Task StudentDelete(int id)
    {
        bool? result = await MessageBoxService.ShowConfirmDialog("Uyarı", "Öğrenci silinsin mi ?");
        if (result.GetValueOrDefault())
        {
            var res = await _studentService.DeleteAsync(id);
            Snackbar.Add(res.Message, severity: res.Success ? Severity.Success : Severity.Error);
            if (res.Success)
            {
                var res1 = await _studentService.GetAllAsync();
                if (res1.Success)
                {
                    Elements = res1.Data.ToList();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = res1.Message;
                }
            }
            StateHasChanged();
        }
    }
    private async Task StudentUpdate(int id)
    {
        Nav.NavigateTo("student/update/" + id);
    }
}