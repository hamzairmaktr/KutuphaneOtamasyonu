@page "/student/update/{Id:int}"
@inject IStudentService _service
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@attribute [Authorize]


<h3 class="mt-2">Öğrenci Güncelle</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Class="my-3" Severity="Severity.Error">@errorMessage</MudAlert>
}

<MudTextField T="string" @bind-Value="studentName" Variant="Variant.Outlined" Label="Öğrenci Adı"></MudTextField>
<MudTextField T="int" @bind-Value="studentNumber" Variant="Variant.Outlined" Label="Öğrenci Numarası"></MudTextField>
<MudTextField T="string" @bind-Value="studentClass" Variant="Variant.Outlined" Label="Öğrenci Sınıfı"></MudTextField>
<MudTextField T="string" @bind-Value="studentEmail" Variant="Variant.Outlined" Label="Öğrenci Email"></MudTextField>
<MudTextField T="string" @bind-Value="studentTel" Variant="Variant.Outlined" Label="Öğrenci Telefon"></MudTextField>


<MudButton OnClick="Kaydet" Class="mt-2" Variant="Variant.Filled" ButtonType="ButtonType.Button" EndIcon="@Icons.Material.Filled.Save" Color="Color.Warning">Güncelle</MudButton>
<MudButton OnClick="Vazgec" Class="mt-2 ms-1" Variant="Variant.Filled" ButtonType="ButtonType.Button" EndIcon="@Icons.Material.TwoTone.Cancel" Color="Color.Error">Vazgeç</MudButton>


@code {
    [Parameter]
    public int Id { get; set; }

    public StudentGetDto Student { get; set; }
    private string errorMessage = "";
    private string studentClass = "";
    private string studentEmail = "";
    private string studentName = "";
    private string studentTel = "";
    private int studentNumber = 0;


    protected override async Task OnInitializedAsync()
    {
        var res = await _service.GetByIdAsync(Id);
        if (res.Success)
        {
            errorMessage = "";
            Student = res.Data;
            studentClass = Student.Class;
            studentEmail = Student.EMail;
            studentName = Student.Name;
            studentTel = Student.TelephoneNumber;
            studentNumber = Student.StudentNumber;

        }
        else
        {
            errorMessage = res.Message;
        }
    }

    private void Vazgec(MouseEventArgs args)
    {
        Nav.NavigateTo("student/list");
    }
    private async Task Kaydet(MouseEventArgs args)
    {
        errorMessage = string.Empty;

        var res = await _service.UpdateAsync(new StudentUpdateDto { Id = Id, Point = Student.Point, Class = studentClass, EMail = studentEmail, Name = studentName, StudentNumber = studentNumber, TelephoneNumber = studentTel, NumberofBooksRead = Student.NumberofBooksRead, Situation = Student.Situation });
        if (!res.Success)
        {
            errorMessage = res.Message;
            return;
        }

        Snackbar.Add(res.Message, Severity.Success);
        Nav.NavigateTo("student/list");
    }
}
