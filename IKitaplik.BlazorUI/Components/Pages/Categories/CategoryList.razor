@page "/category/list"
@inject ICategoryService _categoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject MessageBoxService MessageBoxService
@attribute [Authorize]

@if (isLoading)
{
     <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center" id="loading">
        <img src="/images/Loading.gif" alt="Loading" />
    </div>
}
else
{

    <MudItem Class="mt-2 mb-2 text-end">
        <MudButton Href="category/add" Color="Color.Info" ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
            Yeni Kategori Ekle
        </MudButton>
    </MudItem>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="m-4" CloseIcon="@Icons.Material.Filled.Close">
            <MudText>@errorMessage</MudText>
        </MudAlert>
    }
    else
    {
        <MudTable Items="@Items" Hover="true" ReadOnly="true" Filter="new Func<CategoryGetDto, bool>(FilterFunc)"
                  SortLabel="Sort By" CommitEditTooltip="Commit Edit">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Kategoriler</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<CategoryGetDto, object>(x => x.Id)">Nr</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<CategoryGetDto, object>(x => x.Name)">Kategori Adı</MudTableSortLabel></MudTh>
                <MudTh>İşlemler</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Barkod">@context.Name</MudTd>
                <MudTd>
                    <MudButtonGroup>
                        <MudIconButton ButtonType="ButtonType.Button" OnClick="(() => CategoryUpdate(context.Id))" Color="Color.Warning" Icon="@Icons.Material.Filled.Update"></MudIconButton>
                        <MudIconButton ButtonType="ButtonType.Button" OnClick=" (() => CategoryDelete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }

}

@code {
    private string errorMessage = string.Empty;
    private string searchString = string.Empty;
    IEnumerable<CategoryGetDto> Items = new List<CategoryGetDto>();
    public bool isLoading { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var res = await _categoryService.GetAllAsync();
            if (res.Success)
            {
                Items = res.Data.ToList();
            }
            else
            {
                errorMessage = res.Message;
            }
            isLoading = false;
            StateHasChanged();
        }
    }
    private bool FilterFunc(CategoryGetDto item)
    {
        searchString = searchString?.Trim().ToLower() ?? "";
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.Name.ToLower().Contains(searchString))
            return true;
        return false;
    }
    private async Task CategoryDelete(int id)
    {
        bool? result = await MessageBoxService.ShowConfirmDialog("Uyarı", "Kategori silinsin mi ?");
        if (result.GetValueOrDefault())
        {
            var res = await _categoryService.DeleteAsync(id);
            Snackbar.Add(res.Message, severity: res.Success ? Severity.Success : Severity.Error);
            if (res.Success)
            {
                var res1 = await _categoryService.GetAllAsync();
                if (res1.Success)
                {
                    Items = res1.Data.ToList();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = res1.Message;
                }
            }
            StateHasChanged();
        }
    }
    private async Task CategoryUpdate(int id)
    {
        Nav.NavigateTo("category/update/" + id);
    }
}