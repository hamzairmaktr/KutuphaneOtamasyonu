@page "/book/add"
@inject IBookService _service
@inject ICategoryService _categoryService
@inject IWriterService _writerService
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IDonationService _donationService
@inject IStudentService _studentService
@attribute [Authorize]

<h3 class="mt-2">Kitap Ekle</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Class="my-3" Severity="Severity.Error">@errorMessage</MudAlert>
}
<MudTextField T="string" @bind-Value="barcode" Variant="Variant.Outlined" Label="Barkod"></MudTextField>
<MudTextField T="string" @bind-Value="name" Variant="Variant.Outlined" Label="Kitap Adı"></MudTextField>
<MudTextField T="string" @bind-Value="shelfNo" Variant="Variant.Outlined" Label="Raf No"></MudTextField>
<MudTextField T="int" @bind-Value="pageSize" Variant="Variant.Outlined" Label="Sayfa Sayısı"></MudTextField>
<MudSelect T="CategoryGetDto" @bind-Value="Category" Label="Kategori" Variant="Variant.Outlined" Class="mb-2">
    @foreach (var category in Categories)
    {
        <MudSelectItem Value="@category">@category.Name</MudSelectItem>
    }
</MudSelect>
<MudSelect T="WriterGetDto" @bind-Value="Writer" Label="Yazar" Variant="Variant.Outlined" Class="mb-2">
    @foreach (var writer in Writers)
    {
        <MudSelectItem Value="@writer">@writer.WriterName</MudSelectItem>
    }
</MudSelect>
<MudCheckBox Label="Bağış Olarak Ekle" @bind-Value="isDonation"></MudCheckBox>
@if (isDonation)
{

    <MudAutocomplete Label="Bağışçı Seç"
                     Variant="Variant.Outlined"
                     T="StudentGetDto"
                     ToStringFunc="@(x => x?.Name ?? string.Empty)"
                     @bind-Value="SelectedStudent"
                     SearchFunc="SelectStudent"
                     Clearable="true"></MudAutocomplete>
    <MudDatePicker Label="Bağış Tarihi"
                   Variant="Variant.Outlined"
                   Date="@donationAddDto.Date"
                   DateChanged="@(val => donationAddDto.Date = val ?? DateTime.Now)"></MudDatePicker>
    <MudCheckBox Label="Hasarlımı ?" @bind-Value="donationAddDto.IsItDamaged"></MudCheckBox>
}

<MudButton OnClick="Kaydet" Class="mt-2" Variant="Variant.Filled" ButtonType="ButtonType.Button" EndIcon="@Icons.Material.Filled.Add" Color="Color.Info">Yeni Kayıt Ekle</MudButton>
<MudButton OnClick="Vazgec" Class="mt-2 ms-1" Variant="Variant.Filled" ButtonType="ButtonType.Button" EndIcon="@Icons.Material.TwoTone.Cancel" Color="Color.Error">Vazgeç</MudButton>


@code {
    private string errorMessage = "";
    private string barcode = "";
    private string name = "";
    private string shelfNo = "";
    private int pageSize = 0;
    private bool isDonation = false;
    private CategoryGetDto Category = null;
    private WriterGetDto Writer = null;
    private StudentGetDto SelectedStudent = null;
    private DonationAddDto donationAddDto = new()
    {
        Date = DateTime.Now,
        IsItDamaged = false
    };
    private List<CategoryGetDto> Categories = new List<CategoryGetDto>();
    private List<WriterGetDto> Writers = new List<WriterGetDto>();
    private IEnumerable<StudentGetDto> Students = new List<StudentGetDto>();
    protected override async Task OnInitializedAsync()
    {
        var categories = await _categoryService.GetAllAsync();
        if (categories.Success)
        {
            Categories = categories.Data;
        }
        else
        {
            errorMessage = categories.Message;
        }
        var writers = await _writerService.GetAllAsync();
        if (writers.Success)
        {
            Writers = writers.Data;
        }
        else
        {
            errorMessage = writers.Message;
        }

        var students = await _studentService.GetAllAsync();
        if (students.Success)
        {
            Students = students.Data;
        }
    }


    private void Vazgec(MouseEventArgs args)
    {
        Nav.NavigateTo("book/list");
    }
    private async Task Kaydet(MouseEventArgs args)
    {
        errorMessage = string.Empty;

        var res = await _service.AddBookAsync(new BookAddDto
        {
            Barcode = barcode,
            Name = name,
            ShelfNo = shelfNo,
            PageSize = pageSize,
            Piece = 1,
            CategoryId = Category?.Id ?? 0,
            WriterId = Writer?.Id ?? 0
        });
        if (!res.Success)
        {
            errorMessage = res.Message;
            return;
        }
        else
        {
            Snackbar.Add(res.Message, Severity.Success);
        }
        var addedBook = await _service.GetBookByBarcodeAsync(barcode);
        if (SelectedStudent is not null && addedBook.Success && isDonation)
        {
            donationAddDto.BookId = addedBook.Data.Id;
            donationAddDto.StudentId = SelectedStudent.Id;
            var resDonation = await _donationService.AddAsync(donationAddDto);
            if (resDonation.Success)
            {
                Snackbar.Add(resDonation.Message, Severity.Success);
            }
        }

        Snackbar.Add(res.Message, Severity.Success);
        Nav.NavigateTo("book/list");
    }
    private async Task<IEnumerable<StudentGetDto>> SelectStudent(string val, CancellationToken e)
    {
        if (string.IsNullOrWhiteSpace(val)) return Students.AsEnumerable();
        return Students.Where(p => p.Name.Contains(val)).AsEnumerable();
    }
}
