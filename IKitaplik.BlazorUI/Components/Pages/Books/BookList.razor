@page "/book/list"
@using IKitaplik.BlazorUI.Components.Components.Book
@inject NavigationManager Nav
@inject IBookService _service
@inject IDonationService _donationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject MessageBoxService MessageBoxService
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="m-4" CloseIcon="@Icons.Material.Filled.Close">
        <MudText>@errorMessage</MudText>
    </MudAlert>
}
else
{
    <MudTable Items="@Elements" Hover="true" ReadOnly="true" Filter="new Func<BookGetDTO, bool>(FilterFunc)"
              SortLabel="Sort By" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Kitaplar</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Id)">Nr</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Barcode)">Barkod</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Name)">İsim</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.WriterName)">Yazar</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.CategoryName)">Kategori</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.ShelfNo)">Raf No</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Piece)">Adet</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.PageSize)">Sayfa Sayısı</MudTableSortLabel></MudTh>
            <MudTh>İşlemler</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Barkod">@context.Barcode</MudTd>
            <MudTd DataLabel="İsim">@context.Name</MudTd>
            <MudTd DataLabel="Yazar">@context.WriterName</MudTd>
            <MudTd DataLabel="Kategori">@context.CategoryName</MudTd>
            <MudTd DataLabel="Raf No">@context.ShelfNo</MudTd>
            <MudTd DataLabel="Adet">@context.Piece</MudTd>
            <MudTd DataLabel="Sayfa Sayısı">@context.PageSize</MudTd>
            <MudTd>
                <MudButtonGroup>
                    <MudIconButton ButtonType="ButtonType.Button" OnClick="(() => BookUpdate(context.Id))" Color="Color.Warning" Icon="@Icons.Material.Filled.Update"></MudIconButton>
                    <MudIconButton ButtonType="ButtonType.Button" OnClick="(() => BookAddPiece(context.Id))" Color="Color.Info" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                    <MudIconButton ButtonType="ButtonType.Button" OnClick=" (() => BookDelete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private string searchString = "", errorMessage = "";
    private IEnumerable<BookGetDTO> Elements = new List<BookGetDTO>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await _service.GetAllBooksAsync();
            if (!res.Success)
            {
                errorMessage = res.Message;
            }
            else
            {
                Elements = res.Data;
            }
        }
        catch (Exception ex)
        {
            //errorMessage = ex.Message;
        }
    }

    private bool FilterFunc(BookGetDTO element)
    {
        searchString = searchString?.Trim().ToLower() ?? "";
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.ToLower().Contains(searchString))
            return true;
        if (element.WriterName.ToLower().Contains(searchString))
            return true;
        if ($"{element.CategoryName.ToLower()} {element.Barcode.ToString()} {element.Id}".Contains(searchString))
            return true;
        if ($"{element.Situation.ToString().ToLower()} {element.ShelfNo.ToLower()}".Contains(searchString))
            return true;
        return false;
    }

    private async Task BookDelete(int id)
    {
        bool? result = await MessageBoxService.ShowConfirmDialog("Uyarı", "Kitap silinsin mi ?");
        if (result.GetValueOrDefault())
        {
            var res = await _service.DeleteBookAsync(id);
            Snackbar.Add(res.Message, severity: res.Success ? Severity.Success : Severity.Error);
            if (res.Success)
            {
                var res1 = await _service.GetAllBooksAsync();
                if (res1.Success)
                {
                    Elements = res1.Data.ToList();
                    StateHasChanged();
                }
                else
                {
                    errorMessage = res1.Message;
                }
            }
            StateHasChanged();
        }
    }
    private void BookUpdate(int id)
    {
        Nav.NavigateTo("book/update/" + id);
    }
    private async Task BookAddPiece(int id)
    {
        DialogOptions dialogOptions = new()
        {
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseOnEscapeKey = true,
        };
        var dRes = await DialogService.ShowAsync<_BookAddPiece>("Kitap Ekle", dialogOptions);
        var data = await dRes.Result;
        DonationAddDto? addDto = (DonationAddDto?)data?.Data;
        if (addDto is not null)
        {
            BookAddPieceDto addedDto = new BookAddPieceDto
            {
                Id = id,
                BeAdded = 1
            };
            var res = await _service.BookAddPieceAsync(addedDto);
            if (res.Success)
            {
                if (addDto.StudentId > 0)
                {
                    addDto.BookId = id;
                    var response = await _donationService.AddAsync(addDto);
                    if (response.Success)
                    {
                        Snackbar.Add(response.Message, Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add(response.Message, Severity.Error);
                    }
                }
                else
                    Snackbar.Add(res.Message, Severity.Success);
            }
            else
            {
                Snackbar.Add(res.Message, Severity.Error);
            }
            await OnInitializedAsync();
        }
    }
}